// This is the complete, final content for ecommerce.js
document.addEventListener('DOMContentLoaded', () => {
    // --- Initialize Bootstrap Tooltips ---
const tooltipTriggerList = document.querySelectorAll('[data-bs-toggle="tooltip"]');
const tooltipList = [...tooltipTriggerList].map(tooltipTriggerEl => new bootstrap.Tooltip(tooltipTriggerEl));
    const API_BASE_URL = 'http://34.195.233.179';
    const path = window.location.pathname;
    const token = localStorage.getItem('lmsToken');

    const Cart = {
        get: function() { return JSON.parse(localStorage.getItem('lmsCart') || '[]'); },
        save: function(cart) { localStorage.setItem('lmsCart', JSON.stringify(cart)); this.updateUI(); },
        add: function(item) { let cart = this.get(); const existingItem = cart.find(cartItem => cartItem.id === item.id); if (existingItem) { existingItem.quantity++; } else { item.quantity = 1; cart.push(item); } this.save(cart); },
        updateQuantity: function(itemId, newQuantity) { let cart = this.get(); const item = cart.find(cartItem => cartItem.id === itemId); if (item) { item.quantity = parseInt(newQuantity, 10); if (item.quantity <= 0) { this.remove(itemId); } else { this.save(cart); } } },
        remove: function(itemId) { let cart = this.get().filter(item => item.id !== itemId); this.save(cart); },
        clear: function() { localStorage.removeItem('lmsCart'); this.updateUI(); },
        updateUI: function() { const cart = this.get(); let totalItems = 0; let subtotal = 0; cart.forEach(item => { totalItems += item.quantity; subtotal += item.price * item.quantity; }); document.querySelectorAll('.rbt-cart-count').forEach(el => { el.textContent = totalItems; }); const miniCartWrapper = document.querySelector('.rbt-minicart-wrapper'); const miniCartFooter = document.querySelector('.rbt-minicart-footer'); if (miniCartWrapper && miniCartFooter) { if (cart.length === 0) { miniCartWrapper.innerHTML = '<p class="text-center mt--20">Your cart is empty.</p>'; miniCartFooter.style.display = 'none'; } else { miniCartWrapper.innerHTML = ''; cart.forEach(item => { const itemHtml = `<li class="minicart-item"><div class="thumbnail"><a href="${item.url}"><img src="/${item.thumbnail}" alt="${item.title}"></a></div><div class="product-content"><h6 class="title"><a href="${item.url}">${item.title}</a></h6><span class="quantity">${item.quantity} * <span class="price">₹${item.price.toLocaleString('en-IN')}</span></span></div><div class="close-btn"><button class="rbt-round-btn remove-from-cart-btn" data-item-id="${item.id}"><i class="feather-x"></i></button></div></li>`; miniCartWrapper.innerHTML += itemHtml; }); miniCartFooter.style.display = 'block'; const subtotalElement = miniCartFooter.querySelector('.rbt-cart-subttotal .price'); if (subtotalElement) subtotalElement.textContent = `₹${subtotal.toLocaleString('en-IN')}`; } } }
    };
    Cart.updateUI();

    document.addEventListener('click', async (e) => { const addToCartButton = e.target.closest('.add-to-card-button a'); if (addToCartButton) { e.preventDefault(); const urlParams = new URLSearchParams(window.location.search); const courseId = urlParams.get('courseId'); if (courseId) { try { const response = await fetch(`${API_BASE_URL}/api/courses/${courseId}`); const result = await response.json(); if (result.success) { const course = result.course; const detailPageUrl = course.isMasterclass ? `the-masterclass-details.html?courseId=${course._id}` : `course-details.html?courseId=${course._id}`; const cartItem = { id: course._id, title: course.title, price: course.price, thumbnail: course.thumbnail, url: detailPageUrl }; Cart.add(cartItem); alert(`"${course.title}" was added to your cart!`); } } catch (error) { console.error("Error adding to cart:", error); } } } const removeFromMiniCartBtn = e.target.closest('.minicart-item .close-btn button'); if (removeFromMiniCartBtn) { e.preventDefault(); const itemId = removeFromMiniCartBtn.dataset.itemId; Cart.remove(itemId); } });

 // In ecommerce.js, REPLACE the block for the details pages with this one.

if (path.includes('course-details.html') || path.includes('the-masterclass-details.html')) {
    const urlParams = new URLSearchParams(window.location.search);
    const courseId = urlParams.get('courseId');
    const token = localStorage.getItem('lmsToken');

    if (courseId) {
        fetch(`${API_BASE_URL}/api/courses/${courseId}`, {
            headers: { 'x-auth-token': token }
        })
        .then(res => res.json())
        .then(data => {
            if (data.success) {
                const { course, hasAccess } = data;
                const curriculumContainer = document.querySelector('#coursecontent .accordion');
                if (curriculumContainer) {
                    curriculumContainer.innerHTML = '';
                    course.episodes.forEach((episode, index) => {
                        const allContents = [...(episode.lessons || []).map(item => ({ ...item, type: 'lesson' })), ...(episode.quizzes || []).map(item => ({ ...item, type: 'quiz' }))];
                        const contentHtml = allContents.map(content => {
                            const isLesson = content.type === 'lesson';
                            const link = `lesson.html?courseId=${course._id}&${isLesson ? 'lessonId' : 'quizId'}=${content._id}`;
                            const iconClass = isLesson ? 'feather-play-circle' : 'feather-help-circle';
                            const lockIcon = '<i class="feather-lock lock-icon rbt-badge-5 ml--10"></i>';

                            if (hasAccess || content.isPreview) {
                                return `<li><a href="${link}"><div class="course-content-left"><i class="${iconClass}"></i> <span class="text">${content.title}</span></div><div class="course-content-right"><span class="min-lable">${isLesson ? content.duration || '' : `${(content.questions || []).length} Qs`}</span></div></a></li>`;
                            } else {
                                // --- THIS IS THE MODIFIED LINE ---
                                return `<li class="locked">
                                            <a href="#" class="disabled" data-bs-toggle="tooltip" data-bs-placement="top" title="Please purchase the course to view this content.">
                                                <div class="course-content-left"><i class="${iconClass}"></i> <span class="text">${content.title}</span></div>
                                                <div class="course-content-right">${lockIcon}</div>
                                            </a>
                                        </li>`;
                            }
                        }).join('');
                        const accordionItem = `<div class="accordion-item card"><h2 class="accordion-header card-header" id="heading-${index}"><button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapse-${index}">${episode.title}</button></h2><div id="collapse-${index}" class="accordion-collapse collapse"><div class="accordion-body card-body pr--0"><ul class="rbt-course-main-content liststyle">${contentHtml}</ul></div></div></div>`;
                        curriculumContainer.innerHTML += accordionItem;
                    });
                }
            }
        });
    }
}

    if (path.includes('student-enrolled-courses.html')) { const createCourseCardHTML = (course) => { const isCompleted = course.status === 'completed'; const progressColor = isCompleted ? 'bar-color-success' : 'bar-color-primary'; return `<div class="col-lg-4 col-md-6 col-12"><div class="rbt-card variation-01 rbt-hover"><div class="rbt-card-img"><a href="course-details.html?courseId=${course._id}"><img src="/${course.thumbnail}" alt="${course.title}"></a></div><div class="rbt-card-body"><h4 class="rbt-card-title"><a href="course-details.html?courseId=${course._id}">${course.title}</a></h4><div class="rbt-progress-style-1 mb--20 mt--10"><div class="single-progress"><h6 class="rbt-title-style-2 mb--10">${isCompleted ? 'Completed' : 'In Progress'}</h6><div class="progress"><div class="progress-bar ${progressColor}" style="width: ${course.progress}%" aria-valuenow="${course.progress}"></div><span class="rbt-title-style-2 progress-number">${course.progress}%</span></div></div></div><div class="rbt-card-bottom"><a class="rbt-btn btn-sm ${isCompleted ? 'bg-primary-opacity' : 'btn-border-gradient'} w-100 text-center" href="${isCompleted ? '#' : `course-details.html?courseId=${course._id}`}">${isCompleted ? 'Download Certificate' : 'Continue Course'}</a></div></div></div></div>`; }; const renderCourses = (courseList, containerSelector) => { const container = document.querySelector(containerSelector); if (!container) return; container.innerHTML = ''; if (courseList.length === 0) { container.innerHTML = '<p class="text-center">No courses in this category.</p>'; return; } courseList.forEach(course => container.innerHTML += createCourseCardHTML(course)); }; fetch(`${API_BASE_URL}/api/student/my-courses`, { headers: { 'x-auth-token': token } }).then(res => res.json()).then(result => { if (result.success) { const allCourses = result.courses; const activeCourses = allCourses.filter(c => c.status === 'active'); const completedCourses = allCourses.filter(c => c.status === 'completed'); renderCourses(allCourses, '#home-4 .row'); const profileTab = document.getElementById('profile-tab-4'); const contactTab = document.getElementById('contact-tab-4'); const homeTab = document.getElementById('home-tab-4'); if (profileTab) profileTab.addEventListener('click', () => renderCourses(activeCourses, '#profile-4 .row')); if (contactTab) contactTab.addEventListener('click', () => renderCourses(completedCourses, '#contact-4 .row')); if (homeTab) homeTab.addEventListener('click', () => renderCourses(allCourses, '#home-4 .row')); } }); }
    
    if (path.includes('cart.html')) { const cartTableBody = document.getElementById('cart-table-body'); const summarySubTotal = document.querySelector('.cart-summary-wrap p:first-of-type span'); const summaryGrandTotal = document.querySelector('.cart-summary-wrap h2 span'); const checkoutButton = document.querySelector('.cart-summary .single-button:first-child button'); const cart = Cart.get(); let grandTotal = 0; if (cartTableBody) { cartTableBody.innerHTML = ''; if (cart.length === 0) { cartTableBody.innerHTML = '<tr><td colspan="5">Your cart is empty.</td></tr>'; if (checkoutButton) checkoutButton.disabled = true; } else { cart.forEach(item => { const itemTotal = item.price * item.quantity; grandTotal += itemTotal; const row = `<tr><td class="pro-title"><a href="${item.url}" style="display: flex; align-items: center;"><img src="/${item.thumbnail}" alt="${item.title}" style="width: 60px; height: 60px; object-fit: cover; border-radius: 5px; margin-right: 15px;"> ${item.title}</a></td><td class="pro-price"><span>₹${item.price.toLocaleString('en-IN')}</span></td><td class="pro-quantity"><div class="pro-qty"><span class="dec qtybtn" data-item-id="${item.id}">-</span><input type="number" value="${item.quantity}" data-item-id="${item.id}" class="quantity-input" readonly><span class="inc qtybtn" data-item-id="${item.id}">+</span></div></td><td class="pro-subtotal"><span>₹${itemTotal.toLocaleString('en-IN')}</span></td><td class="pro-remove"><a href="#" class="remove-from-cart-btn" data-item-id="${item.id}"><i class="feather-x"></i></a></td></tr>`; cartTableBody.innerHTML += row; }); if (checkoutButton) { checkoutButton.onclick = () => window.location.href = 'checkout.html'; } } } if (summarySubTotal) summarySubTotal.textContent = `₹${grandTotal.toLocaleString('en-IN')}`; if (summaryGrandTotal) summaryGrandTotal.textContent = `₹${grandTotal.toLocaleString('en-IN')}`; cartTableBody.addEventListener('click', (e) => { const target = e.target; const removeBtn = target.closest('.remove-from-cart-btn'); if (removeBtn) { e.preventDefault(); const itemId = removeBtn.dataset.itemId; Cart.remove(itemId); window.location.reload(); } if (target.classList.contains('qtybtn')) { const itemId = target.dataset.itemId; const input = cartTableBody.querySelector(`.quantity-input[data-item-id="${itemId}"]`); let currentValue = parseInt(input.value, 10); if (target.classList.contains('inc')) { currentValue++; } else if (target.classList.contains('dec')) { currentValue--; } Cart.updateQuantity(itemId, currentValue); window.location.reload(); } }); }
    if (path.includes('checkout.html')) { const orderSummaryList = document.querySelector('.checkout-cart-total ul'); const subTotalSpan = document.querySelector('.checkout-cart-total p:nth-of-type(1) span'); const grandTotalSpan = document.querySelector('.checkout-cart-total h4.mt--30 span'); const placeOrderBtn = document.querySelector('.plceholder-button .rbt-btn'); const cart = Cart.get(); let subtotal = 0; if (orderSummaryList) { orderSummaryList.innerHTML = ''; if (cart.length > 0) { cart.forEach(item => { const itemTotal = item.price * item.quantity; subtotal += itemTotal; orderSummaryList.innerHTML += `<li>${item.title} <strong>× ${item.quantity}</strong><span>₹${itemTotal.toLocaleString('en-IN')}</span></li>`; }); } } if (subTotalSpan) subTotalSpan.textContent = `₹${subtotal.toLocaleString('en-IN')}`; if (grandTotalSpan) grandTotalSpan.textContent = `₹${subtotal.toLocaleString('en-IN')}`; if (cart.length === 0 && placeOrderBtn) placeOrderBtn.classList.add('disabled'); if (placeOrderBtn) { placeOrderBtn.addEventListener('click', async (e) => { e.preventDefault(); const user = JSON.parse(localStorage.getItem('lmsUser') || '{}'); if (cart.length === 0) return; placeOrderBtn.querySelector('.btn-text').textContent = 'Processing...'; try { const orderResponse = await fetch(`${API_BASE_URL}/api/payment/create-order`, { method: 'POST', headers: { 'Content-Type': 'application/json', 'x-auth-token': token }, body: JSON.stringify({ items: cart }), }); const orderResult = await orderResponse.json(); if (!orderResult.success) throw new Error(orderResult.message); const order = orderResult.order; const options = { key: 'rzp_test_RDnbLvfhXFITDS', amount: order.amount, currency: order.currency, name: "Imperium Learning", description: "Course Purchase", order_id: order.id, handler: async function (response) { const verifyResponse = await fetch(`${API_BASE_URL}/api/payment/verify`, { method: 'POST', headers: { 'Content-Type': 'application/json', 'x-auth-token': token }, body: JSON.stringify({ razorpay_payment_id: response.razorpay_payment_id, razorpay_order_id: response.razorpay_order_id, razorpay_signature: response.razorpay_signature, courseIds: cart.map(item => item.id) }), }); const verifyResult = await verifyResponse.json(); if (verifyResult.success) { alert('Payment successful! You are now enrolled.'); Cart.clear(); window.location.href = 'student-enrolled-courses.html'; } else { alert('Payment verification failed. Please contact support.'); } }, prefill: { name: `${user.firstName} ${user.lastName}`, email: user.email, }, theme: { color: '#0575E6' } }; const rzp = new Razorpay(options); rzp.open(); } catch (error) { alert(`An error occurred: ${error.message}`); } finally { placeOrderBtn.querySelector('.btn-text').textContent = 'Place order'; } }); } }
});